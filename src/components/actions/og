'use client';

import { PhoneOutgoing, Phone, PhoneOff, Play, Pause, FileText, Loader } from 'lucide-react';
import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";

const VoiceCallComponent = () => {
  const [open, setOpen] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [audioURL, setAudioURL] = useState(null);
  const [audioBlob, setAudioBlob] = useState(null); // إضافة state للـ blob
  const [hasPermission, setHasPermission] = useState(false);
  const [error, setError] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isTranscribing, setIsTranscribing] = useState(false); // حالة التحويل
  const [transcriptText, setTranscriptText] = useState(''); // النص المحول
  const [showTranscript, setShowTranscript] = useState(false); // إظهار النص
  
  // استخدام useRef بدلاً من state للمراجع
  const mediaRecorderRef = useRef(null);
  const streamRef = useRef(null);
  const audioChunksRef = useRef([]);
  const timerIntervalRef = useRef(null);
  const autoStopTimeoutRef = useRef(null);
  const audioElementRef = useRef(null);

  // إعداد Deepgram API
  const DEEPGRAM_API_KEY = process.env.NEXT_PUBLIC_DEEPGRAM_API_KEY || 'YOUR_DEEPGRAM_API_KEY';

  // وظيفة تحويل الصوت إلى نص باستخدام Deepgram
  const transcribeAudio = useCallback(async (audioBlob) => {
    if (!audioBlob) {
      setError('لا يوجد ملف صوتي للتحويل');
      return;
    }

    if (!DEEPGRAM_API_KEY || DEEPGRAM_API_KEY === 'YOUR_DEEPGRAM_API_KEY') {
      setError('يجب إعداد مفتاح Deepgram API أولاً');
      console.error('Deepgram API key not configured');
      return;
    }

    setIsTranscribing(true);
    setError(null);

    try {
      // تحديد نوع الملف الصوتي
      const mimeType = audioBlob.type || 'audio/webm';
      console.log('نوع الملف الصوتي:', mimeType);
      console.log('حجم الملف:', audioBlob.size, 'bytes');

      // تحويل الـ blob إلى ArrayBuffer
      const arrayBuffer = await audioBlob.arrayBuffer();
      
      // إعداد headers بناءً على نوع الملف
      let contentType = 'audio/webm';
      if (mimeType.includes('wav')) {
        contentType = 'audio/wav';
      } else if (mimeType.includes('mp3')) {
        contentType = 'audio/mp3';
      } else if (mimeType.includes('ogg')) {
        contentType = 'audio/ogg';
      }

      console.log('إرسال الطلب إلى Deepgram...');
      
      // معاملات Deepgram للنموذج Whisper (الوحيد الذي يدعم العربية)
      const params = new URLSearchParams({
        model: 'whisper-large',
        language: 'ar',
        punctuate: 'true',
        diarize: 'false',
        smart_format: 'true'
      });
      
      const response = await fetch(`https://api.deepgram.com/v1/listen?${params}`, {
        method: 'POST',
        headers: {
          'Authorization': `Token ${DEEPGRAM_API_KEY}`,
          'Content-Type': contentType,
        },
        body: arrayBuffer
      });

      console.log('حالة الاستجابة:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('خطأ في Deepgram API:', response.status, errorText);
        
        if (response.status === 401) {
          throw new Error('مفتاح API غير صحيح');
        } else if (response.status === 400) {
          throw new Error('تنسيق الملف الصوتي غير مدعوم');
        } else if (response.status === 429) {
          throw new Error('تم تجاوز حد الاستخدام');
        } else {
          throw new Error(`خطأ HTTP: ${response.status}`);
        }
      }

      const result = await response.json();
      console.log('نتيجة Deepgram:', result);
      
      if (result.results?.channels?.[0]?.alternatives?.[0]?.transcript) {
        const transcript = result.results.channels[0].alternatives[0].transcript.trim();
        
        if (transcript.length === 0) {
          setError('لم يتم اكتشاف أي كلام في التسجيل');
          return;
        }
        
        setTranscriptText(transcript);
        setShowTranscript(true);
        console.log('النص المحول:', transcript);
      } else {
        console.error('بنية استجابة غير متوقعة:', result);
        setError('لم يتم العثور على نص في التسجيل');
      }

    } catch (err) {
      console.error('خطأ في تحويل الصوت:', err);
      
      if (err.name === 'TypeError' && err.message.includes('Failed to fetch')) {
        setError('خطأ في الاتصال بالإنترنت أو خدمة Deepgram');
      } else {
        setError(err.message || 'حدث خطأ أثناء تحويل الصوت إلى نص');
      }
    } finally {
      setIsTranscribing(false);
    }
  }, [DEEPGRAM_API_KEY]);

  // تنظيف الموارد
  const cleanupResources = useCallback(() => {
    // إيقاف الفترات الزمنية
    if (timerIntervalRef.current) {
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
    }
    
    if (autoStopTimeoutRef.current) {
      clearTimeout(autoStopTimeoutRef.current);
      autoStopTimeoutRef.current = null;
    }

    // إيقاف التسجيل
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
    }

    // إيقاف تدفق الصوت
    if (streamRef.current) {
      streamRef.current.getTracks().forEach(track => track.stop());
      streamRef.current = null;
    }

    // إيقاف تشغيل الصوت
    if (audioElementRef.current) {
      audioElementRef.current.pause();
      audioElementRef.current.currentTime = 0;
    }

    // مسح البيانات
    audioChunksRef.current = [];
    mediaRecorderRef.current = null;
  }, []);

  // عداد وقت التسجيل
  useEffect(() => {
    if (isRecording && open) {
      timerIntervalRef.current = setInterval(() => {
        setRecordingTime(prev => {
          const newTime = prev + 1;
          if (newTime >= 10) {
            stopRecording();
            return 10;
          }
          return newTime;
        });
      }, 1000);
    } else {
      if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = null;
      }
      setRecordingTime(0);
    }

    return () => {
      if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
      }
    };
  }, [isRecording, open]);

  // تنسيق الوقت
  const formatTime = useCallback((seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  }, []);

  // طلب إذن الوصول للميكروفون
  const requestMicrophonePermission = useCallback(async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      setHasPermission(true);
      setError(null);
      // إيقاف التدفق مؤقتاً
      stream.getTracks().forEach(track => track.stop());
      return true;
    } catch (err) {
      setError('لم يتم منح إذن الوصول للميكروفون');
      setHasPermission(false);
      console.error('خطأ في الوصول للميكروفون:', err);
      return false;
    }
  }, []);

  // التحقق من الإذن عند فتح المودال
  useEffect(() => {
    if (open && !hasPermission) {
      requestMicrophonePermission();
    }
    
    // تنظيف عند إغلاق المودال
    if (!open) {
      cleanupResources();
      setIsRecording(false);
      setIsListening(false);
      setRecordingTime(0);
      setError(null);
      setIsPlaying(false);
      setIsTranscribing(false);
      setTranscriptText('');
      setShowTranscript(false);
    }
  }, [open, hasPermission, requestMicrophonePermission, cleanupResources]);

  const startRecording = useCallback(async () => {
    try {
      // تنظيف أي موارد سابقة
      cleanupResources();
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 16000 // معدل عينة مناسب لـ Deepgram
        }
      });
      
      streamRef.current = stream;
      audioChunksRef.current = [];

      // محاولة استخدام أفضل تنسيق متاح
      let options = {};
      if (MediaRecorder.isTypeSupported('audio/wav')) {
        options = { mimeType: 'audio/wav' };
      } else if (MediaRecorder.isTypeSupported('audio/webm;codecs=opus')) {
        options = { mimeType: 'audio/webm;codecs=opus' };
      } else if (MediaRecorder.isTypeSupported('audio/webm')) {
        options = { mimeType: 'audio/webm' };
      }

      console.log('استخدام تنسيق التسجيل:', options);
      const recorder = new MediaRecorder(stream, options);

      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
          console.log('تم جمع قطعة صوتية:', event.data.size, 'bytes');
        }
      };

      recorder.onstop = async () => {
        console.log('توقف التسجيل، إجمالي القطع:', audioChunksRef.current.length);
        
        const mimeType = recorder.mimeType || 'audio/wav';
        const blob = new Blob(audioChunksRef.current, { type: mimeType });
        const url = URL.createObjectURL(blob);
        
        console.log('تم إنشاء blob:', {
          size: blob.size,
          type: blob.type
        });
        
        setAudioURL(prevURL => {
          // تنظيف URL السابق لتجنب تسريب الذاكرة
          if (prevURL) {
            URL.revokeObjectURL(prevURL);
          }
          return url;
        });
        
        // حفظ الـ blob للاستخدام في التحويل
        setAudioBlob(blob);
        
        // تشغيل الصوت تلقائياً بعد انتهاء التسجيل
        setTimeout(() => {
          const audio = new Audio(url);
          audio.addEventListener('loadeddata', () => {
            audio.play();
            setIsPlaying(true);
            audioElementRef.current = audio;
            audio.addEventListener('ended', () => {
              setIsPlaying(false);
            });
          });
        }, 500);
        
        // بدء عملية التحويل إلى نص تلقائياً
        setTimeout(async () => {
          await transcribeAudio(blob);
        }, 1000);
        
        // تنظيف التدفق
        if (streamRef.current) {
          streamRef.current.getTracks().forEach(track => track.stop());
          streamRef.current = null;
        }
      };

      recorder.onerror = (event) => {
        console.error('خطأ في التسجيل:', event.error);
        setError('حدث خطأ أثناء التسجيل');
        cleanupResources();
        setIsRecording(false);
        setIsListening(false);
      };

      mediaRecorderRef.current = recorder;
      recorder.start(1000); // جمع البيانات كل ثانية
      
      setIsRecording(true);
      setError(null);
      setShowTranscript(false); // إخفاء النص السابق
      setTranscriptText('');
      
      // تأخير قصير قبل إظهار الموجات
      setTimeout(() => setIsListening(true), 500);

      // إيقاف تلقائي بعد 10 ثوان
      autoStopTimeoutRef.current = setTimeout(() => {
        stopRecording();
      }, 10000);

    } catch (err) {
      setError('خطأ في بدء التسجيل: ' + err.message);
      console.error('خطأ في التسجيل:', err);
      cleanupResources();
      setIsRecording(false);
      setIsListening(false);
    }
  }, [cleanupResources, transcribeAudio]);

  const stopRecording = useCallback(() => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
    }
    
    // تنظيف المؤقتات
    if (timerIntervalRef.current) {
      clearInterval(timerIntervalRef.current);
      timerIntervalRef.current = null;
    }
    
    if (autoStopTimeoutRef.current) {
      clearTimeout(autoStopTimeoutRef.current);
      autoStopTimeoutRef.current = null;
    }
    
    setIsRecording(false);
    setRecordingTime(0);
  }, []);

  const handleRecord = useCallback(async () => {
    if (!hasPermission) {
      const permissionGranted = await requestMicrophonePermission();
      if (!permissionGranted) return;
    }

    if (!isRecording) {
      // مسح التسجيل السابق
      if (audioURL) {
        URL.revokeObjectURL(audioURL);
        setAudioURL(null);
      }
      setAudioBlob(null);
      setIsPlaying(false);
      setIsListening(false);
      setTranscriptText('');
      setShowTranscript(false);
      await startRecording();
    } else {
      stopRecording();
    }
  }, [hasPermission, isRecording, audioURL, requestMicrophonePermission, startRecording, stopRecording]);

  // وظيفة تشغيل/إيقاف الصوت
  const togglePlayback = useCallback(() => {
    if (!audioURL) return;

    if (!audioElementRef.current) {
      audioElementRef.current = new Audio(audioURL);
      audioElementRef.current.addEventListener('ended', () => {
        setIsPlaying(false);
      });
    }

    if (isPlaying) {
      audioElementRef.current.pause();
      setIsPlaying(false);
    } else {
      audioElementRef.current.currentTime = 0;
      audioElementRef.current.play();
      setIsPlaying(true);
    }
  }, [audioURL, isPlaying]);

  // تنظيف عند إلغاء تحميل المكون
  useEffect(() => {
    return () => {
      cleanupResources();
      if (audioURL) {
        URL.revokeObjectURL(audioURL);
      }
    };
  }, [cleanupResources, audioURL]);

  // مكون الموجة الصوتية
  const AudioWave = ({ isClickable = false, onClick = null }) => {
    const bars = Array.from({ length: 7 }, (_, i) => i);
    
    return (
      <div 
        className={`flex items-center justify-center space-x-1.5 ${isClickable ? 'cursor-pointer hover:scale-110 transition-transform duration-200' : ''}`}
        onClick={onClick}
      >
        {bars.map((bar, index) => (
          <div
            key={bar}
            className={`bg-gradient-to-t from-green-300 via-blue-400 to-cyan-300 rounded-full shadow-lg shadow-cyan-300/30 ${
              isClickable && isPlaying ? 'animate-pulse' : ''
            }`}
            style={{
              width: '4px',
              height: '14px',
              animation: isClickable && !isPlaying ? 'none' : `audioWave 1.8s ease-in-out infinite`,
              animationDelay: `${index * 0.15}s`,
            }}
          />
        ))}
        <style jsx>{`
          @keyframes audioWave {
            0%, 100% { 
              height: 14px;
              opacity: 0.5;
              transform: scaleY(1);
            }
            25% { 
              height: 28px;
              opacity: 0.8;
              transform: scaleY(1.2);
            }
            50% { 
              height: 42px;
              opacity: 1;
              transform: scaleY(1.4);
            }
            75% { 
              height: 22px;
              opacity: 0.9;
              transform: scaleY(1.1);
            }
          }
        `}</style>
      </div>
    );
  };

  // حساب النسبة المئوية للتقدم
  const progressPercentage = (recordingTime / 10) * 100;

  // تحميل التسجيل
  const downloadRecording = useCallback(() => {
    if (!audioURL) return;
    
    const a = document.createElement('a');
    a.href = audioURL;
    a.download = `recording-${new Date().toISOString().slice(0,19).replace(/:/g, '-')}.wav`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  }, [audioURL]);

  // نسخ النص المحول
  const copyTranscript = useCallback(() => {
    if (transcriptText) {
      navigator.clipboard.writeText(transcriptText);
    }
  }, [transcriptText]);

  // تحديد ما إذا كان يجب إظهار الموجات (أثناء التسجيل أو بعده إذا كان هناك تسجيل)
  const shouldShowWaves = isListening || (audioURL && !isRecording);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          variant="outline"
          size="icon"
          className="h-9 w-9 rounded-full text-green-200 dark:text-green-400 border-green-300/30 dark:border-green-500/30 hover:bg-green-100 dark:hover:bg-green-400/20 transition-all duration-200"
          aria-label="بدء مكالمة صوتية"
        >
          <PhoneOutgoing className="h-4 w-4" />
        </Button>
      </DialogTrigger>
      
      <DialogContent className='bg-gradient-to-tr from-violet-700 via-blue-900/50 to-green-400/50 dark:from-violet-600/20 dark:via-blue-900/20 dark:to-green-400/20 backdrop-blur-xl border border-gray-300/40 dark:border-gray-600/30 rounded-3xl max-w-md mx-auto'>
        <div className="flex flex-col items-center justify-center p-6 space-y-6">
          
          {/* صورة المستخدم مع الموجات الصوتية */}
          <div className="relative flex items-center justify-center">
            
            {/* الموجات الصوتية */}
            {shouldShowWaves && (
              <>
                <div className="absolute w-40 h-40 rounded-full border-2 border-white/20 animate-ping"></div>
                <div className="absolute w-48 h-48 rounded-full border border-white/10 animate-ping" style={{animationDelay: '0.5s'}}></div>
                <div className="absolute w-56 h-56 rounded-full border border-white/5 animate-ping" style={{animationDelay: '1s'}}></div>
              </>
            )}
            
            {/* الأفاتار */}
            <div className={`relative z-10 w-40 h-40 rounded-full bg-gradient-to-t from-blue-950 via-blue-800 to-purple-500/80 backdrop-blur-sm flex items-center justify-center text-white font-bold shadow-2xl border-2 border-white/20 ${
              shouldShowWaves ? 'scale-105' : ''
            } transition-transform duration-300`}>
              <div className="w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-600 rounded-full flex items-center justify-center text-2xl font-bold">
                THG
              </div>
            </div>
          </div>

          {/* معلومات التسجيل */}
          <div className="text-center space-y-4">
            {error ? (
              <p className="text-red-300 text-lg font-semibold tracking-wide" role="alert">
                {error}
              </p>
            ) : (
              <p className="text-white/90 text-lg font-semibold tracking-wide">
                {!hasPermission 
                  ? 'يجب السماح بالوصول للميكروفون' 
                  : !isRecording && !audioURL
                    ? 'ابدأ التسجيل (حد أقصى 10 ثوان)' 
                  : isRecording
                    ? `جاري التسجيل... (${10 - recordingTime} ثانية متبقية)`
                    : isTranscribing
                      ? 'جاري تحويل الصوت إلى نص...'
                      : 'اضغط على الموجات لتشغيل التسجيل'}
              </p>
            )}
            
            {/* مؤشر التحويل */}
            {isTranscribing && (
              <div className="flex items-center justify-center space-x-2">
                <Loader className="h-5 w-5 animate-spin text-blue-400" />
                <span className="text-blue-300 text-sm">تحويل الصوت إلى نص...</span>
              </div>
            )}
            
            {/* الموجة الصوتية والتوقيت */}
            {shouldShowWaves && (
              <div className="flex flex-col items-center space-y-3">
                <AudioWave 
                  isClickable={!isRecording && audioURL}
                  onClick={!isRecording && audioURL ? togglePlayback : null}
                />
                
                {isRecording && (
                  <>
                    <div className="px-4 py-1.5 bg-gradient-to-r from-blue-500/20 to-green-400/20 backdrop-blur-sm rounded-full border border-white/10">
                      <span className="text-white/80 text-sm font-mono tracking-wider">
                        {formatTime(recordingTime)} / 00:10
                      </span>
                    </div>
                    
                    {/* شريط التقدم */}
                    <div className="w-48 h-2 bg-gray-600/50 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-gradient-to-r from-blue-400 to-green-400 transition-all duration-1000 ease-linear"
                        style={{ width: `${progressPercentage}%` }}
                        role="progressbar"
                        aria-valuenow={progressPercentage}
                        aria-valuemin={0}
                        aria-valuemax={100}
                      ></div>
                    </div>
                  </>
                )}

                {/* مؤشر التشغيل للتسجيل المحفوظ */}
                {!isRecording && audioURL && !isTranscribing && (
                  <div className="flex items-center space-x-2">
                    <div className="px-3 py-1 bg-gradient-to-r from-green-500/20 to-blue-400/20 backdrop-blur-sm rounded-full border border-white/10">
                      <span className="text-white/80 text-xs">
                        {isPlaying ? 'جاري التشغيل...' : 'اضغط للتشغيل'}
                      </span>
                    </div>
                    <Button
                      onClick={downloadRecording}
                      className="px-3 py-1 bg-blue-500/90 hover:bg-blue-500 text-white text-xs rounded-lg transition-all duration-200"
                      aria-label="تحميل التسجيل"
                    >
                      تحميل
                    </Button>
                  </div>
                )}
              </div>
            )}
          </div>

          {/* عرض النص المحول */}
          {showTranscript && transcriptText && (
            <div className="w-full max-w-sm bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20 p-4 space-y-3">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <FileText className="h-4 w-4 text-green-400" />
                  <span className="text-white/90 text-sm font-medium">النص المحول:</span>
                </div>
                <Button
                  onClick={copyTranscript}
                  className="px-2 py-1 bg-green-500/90 hover:bg-green-500 text-white text-xs rounded-lg transition-all duration-200"
                  aria-label="نسخ النص"
                >
                  نسخ
                </Button>
              </div>
              <div className="bg-gray-900/30 rounded-lg p-3 max-h-32 overflow-y-auto">
                <p className="text-white/90 text-sm leading-relaxed text-right" dir="rtl">
                  {transcriptText}
                </p>
              </div>
            </div>
          )}

          {/* زر إعادة المحاولة في حالة الخطأ */}
          {error && audioBlob && !isTranscribing && (
            <Button
              onClick={() => transcribeAudio(audioBlob)}
              className="px-4 py-2 bg-yellow-500/90 hover:bg-yellow-500 text-white text-sm rounded-lg transition-all duration-200 flex items-center space-x-2"
              aria-label="إعادة محاولة التحويل"
            >
              <Loader className="h-4 w-4" />
              <span>إعادة محاولة التحويل</span>
            </Button>
          )}

          {/* أزرار التحكم */}
          <div className="flex items-center justify-center">
            <Button
              onClick={handleRecord}
              disabled={(error && !hasPermission) || isTranscribing}
              className={`h-16 w-16 rounded-full transition-all duration-300 backdrop-blur-sm border-2 ${
                isRecording
                  ? 'bg-red-500/90 hover:bg-red-500 border-red-300/50 text-white shadow-lg shadow-red-500/25'
                  : hasPermission
                    ? 'bg-green-500/90 hover:bg-green-500 border-green-300/50 text-white shadow-lg shadow-green-500/25'
                    : 'bg-gray-500/90 hover:bg-gray-500 border-gray-300/50 text-white shadow-lg shadow-gray-500/25'
              } ${(error && !hasPermission) || isTranscribing ? 'opacity-50 cursor-not-allowed' : 'hover:scale-105'}`}
              aria-label={isRecording ? 'إيقاف التسجيل' : 'بدء التسجيل'}
            >
              {isTranscribing ? (
                <Loader className="h-6 w-6 animate-spin" />
              ) : isRecording ? (
                <PhoneOff className="h-6 w-6" />
              ) : (
                <Phone className="h-6 w-6" />
              )}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default VoiceCallComponent;